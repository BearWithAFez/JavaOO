import java.awt.Color;
import java.awt.Graphics;

/**
 * @author DVDV
 */
public class Spelbord extends javax.swing.JPanel {
    private static final int RIJEN = 6;
    private static final int KOLOMMEN = 7;
    private static final int SPELER = 1; // Yellow
    private static final int COMPUTER = 2; // Red
    private static final int TO_WIN = 4;
    private int[][] schijven;
    private int currentPlayer;
    
    /**
     * Creates new form Spelbord
     */
    public Spelbord() {
        initComponents();
        schijven = new int[KOLOMMEN][RIJEN];
        currentPlayer = 1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void clickEvent(java.awt.event.MouseEvent evt){
        int kolom = evt.getX() / (getWidth() / KOLOMMEN);
        if(werpSchijf(currentPlayer, kolom)){
            currentPlayer = (currentPlayer == 1) ? 2 : 1;
            repaint();
        }
    }
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        tekenSchijven(g);
        tekenBord(g);
    }
    
    private void tekenBord(Graphics g){
        int xFactor = getWidth() / KOLOMMEN;
        int yFactor = getHeight() / RIJEN;
        
        g.setColor(Color.BLACK);
        
        // HORZ
        g.drawLine(0, 0, getWidth(), 0);
        for (int i = 0; i < RIJEN; i++) {
            g.drawLine(0, i * yFactor, getWidth(), i * yFactor);
        }
        
        // VERT
        g.drawLine(0, 0, 0, getHeight());
        for (int i = 0; i < KOLOMMEN; i++) {
            g.drawLine(i * xFactor, 0, i * xFactor, getHeight());
        }
    }
    
    private void tekenSchijven(Graphics g){        
        int xFactor = getWidth() / KOLOMMEN;
        int yFactor = getHeight() / RIJEN;
        
        for (int i = 0; i < KOLOMMEN; i++) {
            for (int j = 0; j < RIJEN; j++) {
                
                switch(schijven[i][j]){
                    case 0:
                        continue;
                    case 1:
                        g.setColor(Color.YELLOW);
                        break;
                    case 2:
                    default:
                        g.setColor(Color.RED);
                        break;                         
                }
                
                g.fillOval((xFactor * i), getHeight() - ((yFactor) * (j+1)) - 3, xFactor, yFactor);
            }
        }        
    }
    
    public boolean werpSchijf(int speler, int kolom){
        for (int i = 0; i < RIJEN; i++) {
            if(schijven[kolom][i] == 0){
                schijven[kolom][i] = speler;
                return true;
            }
        }
        return false;
    }
    
    public int giveWinner(){
        // Vert
        int streak = 0;
        int current = 0;
        
        for (int i = 0; i < KOLOMMEN; i++) {
            for (int j = 0; j < RIJEN; j++) {
                if(schijven[i][j] == 0){
                    break;
                }
                if(schijven[i][j] == current){
                    streak++;
                    if (streak == TO_WIN) return current;
                }
                else{
                    current = schijven[i][j];
                    streak = 1;
                }
            }
            streak = 0;
            current = 0;
        }
        
        // No winner yet
        return 0;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
